#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
# if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
#   source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
# fi

# Customize for my needs ...

### Setting default theme for zsh shell
# prompt agnoster

### Remove hostname from the prompt
# prompt_context() {
#   if [[ "$USER" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then
#     prompt_segment black default "%(!.%{%F{yellow}%}.)$USER"
#   fi
# }

. /usr/local/etc/profile.d/z.sh

### USER ALIAS
alias cp='cp -iv'
alias mv='mv -iv'
alias mkdir='mkdir -pv'
alias ls='ls -GFh'
# alias la="ls -la"
alias ll='ls -FGlAhp'
alias less='less -FSRXc'
alias cd..='cd ../'
alias ..='cd ../'
alias ...='cd ../../'
alias .3='cd ../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../../'
alias .6='cd ../../../../../../'
alias edit='subl'
alias f='open -a Finder ./'
alias ~="cd ~"
alias c='clear'
alias cls='clear;ll'
alias which='type -all'
alias path='echo -e ${PATH//:/\\n}'
alias show_options='shopt'
alias fix_stty='stty sane'
alias cic='set completion-ignore-case On'
mcd () { mkdir -p "$1" && cd "$1"; }
trash () { command mv "$@" ~/.Trash ; }
ql () { qlmanage -p "$*" >& /dev/null; }
alias DT='tee ~/Desktop/terminalOut.txt'
alias numFiles='echo $(ls -1 | wc -l)'


### GIT COMMANDS
alias pull="git pull origin master"
alias githist="git log --author=lathen --graph --pretty=format:'%Cred%h%Creset - %C(bold blue)%an%Creset - %C(yellow)%d%Creset %s %Cgreen(%cr)' --abbrev-commit"
alias allgithist="git log --graph --pretty=format:'%Cred%h%Creset - %C(bold blue)%an%Creset - %C(yellow)%d%Creset %s %Cgreen(%cr)' --abbrev-commit"
gitlog () { git log --name-status --diff-filter="ACDMRT" -1 -U "$1"; }
getgithist() { git log --author=$1 --graph --pretty=format:'%Cred%h%Creset - %C(bold blue)%an%Creset - %C(yellow)%d%Creset %s %Cgreen(%cr)' --abbrev-commit -24; }

### SEARCHING
alias qfind="find . -name "
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias hg='history | grep '
agrep () { alias | grep "$1"}
ff () { /usr/bin/find . -name "$@" ; }
ffs () { /usr/bin/find . -name "$@"'*' ; }
ffe () { /usr/bin/find . -name '*'"$@" ; }
search () { grep --color=auto -nrI "$1" ${3-.} --include="${2-*}" --exclude='./env/*' --exclude='./.*' } 


#   -------------------------------
#   3.  UBER COMMANDS
#   -------------------------------
# User specific environment and startup programs
load () { ssh adhoc"$2"-"$1"1; }
alias dca='ssh hadoopgw02-dca1'
alias sdca='ssh hadoopsecgw01-dca1'
alias phx='ssh hadoopgw02-phx2'
alias tun='/Users/lathen/Uber/./tunnels.sh'
alias docstart='/Users/lathen/Uber/./tunnels.sh; cd /Users/lathen/Uber/piper; make tunnel; ./start-local-docker pipelines/core/hive_etl'
alias docstop='cd /Users/lathen/Uber/piper; ./stop-local-docker'

alias piper1='/Users/lathen/Uber/pcp/piper'
alias pcp1='/Users/lathen/Uber/pcp/piper-core-pipelines'
alias docstart1='/Users/lathen/Uber/./tunnels.sh; cd /Users/lathen/Uber/pcp/piper; make tunnel; ./start-local-docker pipelines/core/hive_etl'
alias docstop1='cd /Users/lathen/Uber/pcp/piper; ./stop-local-docker'

alias pcp_sjc='mysql -h 127.0.0.1 -P 1306 -u s_piper_core_ -peTdVNPpR0C2HCSvgNvwUlRx790ClBIXB piper_core_pipelines'
alias pcp_dca='mysql -h 127.0.0.1 -P 1307 -u s_piper_core_2 -pVd3M6Q0wZwgwaIvXJINeSe0APTWSECeD piper_core_pipelines2'
alias sub_piper='subl /Users/lathen/Uber/sublime_projects/piper_others.sublime-workspace'
alias sub_pcp='subl /Users/lathen/Uber/sublime_projects/pcp.sublime-workspace'

#   ----------------------------------------
#   Customization for Powerlevel9k prompts
#   ----------------------------------------
POWERLEVEL9K_MODE='nerdfont-complete'
# ZSH_THEME="powerlevel9k/powerlevel9k.zsh-theme"
source  ~/powerlevel9k/prompt_powerlevel9k_setup

POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(
  custom_medium custom_freecodecamp dir vcs
)

POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(
  status root_indicator command_execution_time time
)

POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD='0'
POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND="black"
POWERLEVEL9K_COMMAND_EXECUTION_TIME_BACKGROUND="green"
# POWERLEVEL9K_PROMPT_ADD_NEWLINE=true

# Add the custom Medium M icon prompt segment
POWERLEVEL9K_CUSTOM_MEDIUM="echo -n '\uFC47'"
POWERLEVEL9K_CUSTOM_MEDIUM_FOREGROUND="black"
POWERLEVEL9K_CUSTOM_MEDIUM_BACKGROUND="white"

# Add the custom freeCodeCamp prompt segment
POWERLEVEL9K_CUSTOM_FREECODECAMP="echo -n '\uF0A4' lathendra"
POWERLEVEL9K_CUSTOM_FREECODECAMP_FOREGROUND="white"
POWERLEVEL9K_CUSTOM_FREECODECAMP_BACKGROUND="cyan"

# UBER Connection Proxies
# connect-proxy() {
#   bastion_connections=$(ps aux | grep -c 'ssh -fCND 8001 bastion01-sjc1.prod.uber.com')
#   if [[ $bastion_connections -lt 2 ]] ; then 
#       ssh -fCND 8001 bastion01-sjc1.prod.uber.com
#   else
#       echo "Already connected to bastion01-sjc1"
#   fi
# }

# connect-athena() {
#   # Start tunnel
#   connect-proxy

#   # Configure socks proxy
#   socksproxy_config=$(networksetup -getsocksfirewallproxy "Wi-Fi")
#   proxy_enabled=$(echo $socksproxy_config | grep -c "Enabled: yes")
#   proxy_configured=$(echo $socksproxy_config | grep -c "Server: localhost")
#   if [[ $proxy_configured -eq 0 ]] ; then
#     echo "Need to configure firewall server"
#     networksetup -setsocksfirewallproxy "Wi-Fi" localhost 8001
#   else
#     echo "Firewall server already configured"
#   fi
  
#   bypass_domains=$(networksetup -getproxybypassdomains "Wi-Fi")
#   bypass_domains_configured=$(echo $bypass_domains | grep -E "\*\.local" | grep -cE "169\.254/16")

#   if [[ $bypass_domains_configured -eq 0 ]] ; then 
#     # Set bypass domains
#     echo "Need to configure bypass domains"
#     networksetup -setproxybypassdomains "Wi-Fi" *.local 169.254/16
#   else
#     echo "Bypass domains already configured"
#   fi

#   if [[ $proxy_enabled -eq 0 ]] ; then 
#     # Enable proxy
#     echo "Need to enable proxy"
#     networksetup -setsocksfirewallproxystate "Wi-Fi" on
#   else
#     echo "Proxy already enabled"
#   fi
# }

# disconnect-athena() {
#   # Disable proxy
#   networksetup -setsocksfirewallproxystate "Wi-Fi" off
#   # Kill running SSH tunnel, if one exists
#   pkill -f "ssh -fCND 8001 bastion01-sjc1.prod.uber.com"
# }

# connect-proxy
    
